/*
 * Copyright 2018 Christopher Osthues
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

grammar org.xtext.vuc.mgpl.MGPL with org.eclipse.xtext.common.Terminals

generate mGPL "http://www.xtext.org/vuc/mgpl/MGPL"

Prog:
	'game' name=ID '(' attrAssList=AttrAssList? ')' decls+=Decl* stmtBlock=StmtBlock blocks+=Block*;

Decl:
	VarDecl ';' | ObjDecl ';';

VarDecl:
	SimpleVarDecl | ArrayVarDecl;

SimpleVarDecl:
	'int' name=ID (init=Init)?;
	
ArrayVarDecl:
	'int' name=ID '[' len=INT ']';
	
Init returns Expr:
	'=' Expr;

ObjDecl:
	SimpleObjDecl | ArrayObjDecl;
	
SimpleObjDecl:
	objType=ObjType name=ID '(' (attrAssList=AttrAssList)? ')';

ArrayObjDecl:
	objType=ObjType name=ID '[' len=INT ']';
	
ObjType:
	'rectangle' | 'triangle' | 'circle';

AttrAssList:
	attrList+=AttrAss (',' attrList+=AttrAss)*;
	
AttrAss:
	{AttrAss} name=ID '=' expr=Expr;
	
Block:
	AnimBlock | EventBlock;
	
AnimBlock:
	'animation' name=ID '(' objType=ObjType objName=ID ')' stmtBlock=StmtBlock;
	
EventBlock:
	'on' key=KeyStroke stmtBlock=StmtBlock;
	
KeyStroke:
	'space' | 'leftarrow' | 'rightarrow' | 'uparrow' | 'downarrow';
	
StmtBlock:
	{StmtBlock} '{' stmts+=Stmt* '}';
	
Stmt:
	IfStmt | ForStmt | AssStmt ';';
	
IfStmt:
	'if' '(' expr=Expr ')' thenBlock=StmtBlock (else?='else' elseBlock=StmtBlock)?;
	
ForStmt:
	'for' '(' init=AssStmt ';' condition=Expr ';' counter=AssStmt ')' loopBody=StmtBlock;

AssStmt:
	var=Var '=' expr=Expr;
	
Var:
	name=ID (array?='[' arrayAccess=Expr ']')? (access?='.' accName=ID)?;

Expr returns Expr:
	ExprDisj;

ExprDisj returns Expr:
	ExprConj ({Operation.left=current} op='||' right=ExprConj)*;
	
ExprConj returns Expr:
	ExprRel ({Operation.left=current} op='&&' right=ExprRel)*;

ExprRel returns Expr:
	ExprAdd ({Operation.left=current} op=('==' | '<=' | '<') right=ExprAdd)*;

ExprAdd returns Expr:
	ExprMul ({Operation.left=current} op=('+' | '-') right=ExprMul)*;
	
ExprMul returns Expr:
	ExprUnary ({Operation.left=current} op=('*' | '/') right=ExprUnary)*;

ExprUnary returns Expr:
	{UnaryOperation} op=('-' | '!') expr=ExprUnary | '(' {BracketExpr} expr=Expr ')' | ExprAtomic;
	
ExprAtomic:
	{Numeric} numeric=INT | Var ({Touches.left=current} 'touches' right=Var)?;

